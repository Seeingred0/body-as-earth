'use strict';

var chalk = require('chalk');
var child_process = require('child_process');
var fs = require('fs-extra');
var path = require('path');

var rFileStatus = /^[AM]\s+(.+)$/;

exports.lintFiles = function (files, config) {
    if (!config) {
        console.log('Lint is not configed.');
        return;
    }
    var filesLinted = 0;
    var lintErrors = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var filename = _step.value;

            var lintConfig = config[path.extname(filename).slice(1)];
            if (lintConfig) {
                var Lint = require('./linters/' + lintConfig.engine).Lint;
                var lint = new Lint(filename, lintConfig.config, lintConfig.ignore);
                var result = lint.lint();
                if (typeof result !== 'undefined') {
                    filesLinted += 1;
                    if (result) {
                        lintErrors += 1;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    if (filesLinted === 0) {
        console.log('No files needed to be linted');
    } else if (!lintErrors) {
        console.log('\n' + chalk.white.bgGreen.bold(' OKAY ') + ' No lint errors.');
    }
    return lintErrors;
};

exports.lint = function () {
    child_process.exec('git diff --name-status HEAD', function (err, stdout) {
        if (err) {
            console.log(chalk.bold('Exception: ') + 'Not a git repo.');
        } else {
            if (stdout) {
                var files = [];
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = stdout.trim().split('\n')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var fileStatus = _step2.value;

                        var result = rFileStatus.exec(fileStatus);
                        if (result) {
                            files.push(result[1]);
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                            _iterator2['return']();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                if (files.length) {
                    var gspConfig = fs.readJSONSync(path.join(process.cwd(), '.gspconfig'), { throws: false }) || {};
                    exports.lintFiles(files, gspConfig.lint);
                } else {
                    console.log('No files changed.');
                }
            } else {
                console.log('No files changed.');
            }
        }
    });
};
