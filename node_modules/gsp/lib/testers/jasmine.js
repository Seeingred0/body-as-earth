'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var gspdata = require('../util/gspdata');
var path = require('path');
var test = require('./test');
var jasmine = require('jasmine-core');

var rJasmineCore = /\/jasmine-core\//;

var Jasmine = (function (_test$Test) {
    _inherits(Jasmine, _test$Test);

    function Jasmine(specFiles, helperFiles) {
        _classCallCheck(this, Jasmine);

        _get(Object.getPrototypeOf(Jasmine.prototype), 'constructor', this).call(this, specFiles, helperFiles);
        this.engineFiles = jasmine.files.jsFiles.map(function (filename) {
            return path.join(jasmine.files.bootDir, filename);
        });
        this.engineFiles.push(path.join(jasmine.files.bootDir, jasmine.files.bootFiles[0]));
    }

    _createClass(Jasmine, [{
        key: 'run',
        value: function run(callback) {
            _get(Object.getPrototypeOf(Jasmine.prototype), 'run', this).call(this, callback);
        }
    }, {
        key: 'reporter',
        value: function reporter() {
            var code = '\n        (function () {\n            var sendMessage = function () {\n                var args = Array.prototype.slice.call(arguments);\n                alert(JSON.stringify(args));\n            };\n            var gspReporter = {\n              specStarted: function (result) {sendMessage("spec.start", result);},\n              specDone: function (result) {\n                result.failedExpectations = result.failedExpectations.map(function(expect) {\n                    delete expect.actual;\n                    return expect;\n                });\n                sendMessage("spec.done", result);},\n              jasmineDone: function () {sendMessage("spec.finish");}\n            }\n            jasmine.getEnv().addReporter(gspReporter);\n        })();\n        ';
            return gspdata.file('reporter.js', code);
        }
    }, {
        key: 'onSpecDone',
        value: function onSpecDone(result) {
            this.specStats[result.status] += 1;
            if (result.status === 'failed') {
                this.emit('failed', {
                    name: result.fullName,
                    errors: result.failedExpectations.map(function (expect) {
                        return {
                            message: expect.message,
                            stack: expect.stack.split('\n').filter(function (line) {
                                return !rJasmineCore.test(line);
                            }).join('\n')
                        };
                    })
                });
            } else {
                this.emit(result.status);
            }
            this.emit('done');
        }
    }]);

    return Jasmine;
})(test.Test);

exports.Test = Jasmine;
