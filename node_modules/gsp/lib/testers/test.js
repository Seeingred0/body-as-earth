'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var events = require('events');
var gspdata = require('../util/gspdata');
var mustache = require('mustache');
var phantomjs = require('../util/phantom');

var RUNNER_TMPL = '\n<!doctype html>\n<html lang="zh">\n    <head>\n        <meta content="text/html; charset=utf-8" http-equiv="content-type" />\n        {{#scripts}}\n        <script src="{{&.}}"></script>\n        {{/scripts}}\n    </head>\n    <body></body>\n</html>\n';

var Test = (function (_events$EventEmitter) {
    _inherits(Test, _events$EventEmitter);

    function Test(specFiles, helperFiles) {
        _classCallCheck(this, Test);

        _get(Object.getPrototypeOf(Test.prototype), 'constructor', this).call(this);
        this.specFiles = specFiles;
        this.helperFiles = helperFiles;
        this.engineFiles = [];

        this.specStats = {
            total: 0,
            passed: 0,
            failed: 0,
            pending: 0
        };
    }

    _createClass(Test, [{
        key: 'generateRunner',
        value: function generateRunner() {
            var scripts = [];
            scripts = scripts.concat(this.engineFiles, [this.reporter()], this.helperFiles, this.specFiles);
            var html = mustache.render(RUNNER_TMPL, {
                scripts: scripts
            });
            return gspdata.file('specRunner.html', html);
        }
    }, {
        key: 'run',
        value: function run() {
            var runner = this.generateRunner();
            phantomjs.spawn(runner);
            phantomjs.on('spec.start', this.onSpecStart.bind(this));
            phantomjs.on('spec.done', this.onSpecDone.bind(this));
            phantomjs.on('spec.finish', this.onSpecFinish.bind(this));
            phantomjs.on('error', function (message, stack) {
                console.log(stack);
            });
        }
    }, {
        key: 'reporter',
        value: function reporter() {}
    }, {
        key: 'onSpecStart',
        value: function onSpecStart() {
            this.specStats.total += 1;
        }
    }, {
        key: 'onSpecDone',
        value: function onSpecDone() {}
    }, {
        key: 'onSpecFinish',
        value: function onSpecFinish() {
            phantomjs.halt();
            gspdata.file('specRunner.html', null);
            gspdata.file('reporter.js', null);
            this.emit('finish', this.specStats);
        }
    }]);

    return Test;
})(events.EventEmitter);

exports.Test = Test;
