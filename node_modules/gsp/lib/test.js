'use strict';

var chalk = require('chalk');
var child_process = require('child_process');
var fs = require('fs-extra');
var glob = require('./util/glob');
var path = require('path');

var rFileStatus = /^[AM]\s+(.+)$/;

exports.testFiles = function (files, config) {
    if (!config) {
        console.log('test is not configed.');
        return;
    }
    var specFiles = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var filename = _step.value;

            if (glob.match(filename, config.spec_files)) {
                specFiles.push(filename);
            } else if (glob.match(filename, config.src_files)) {
                (function () {
                    var reg = new RegExp('\\b' + path.basename(filename).replace(/\.js/, '(?:\.js)?') + '\\b');
                    specFiles = specFiles.concat(glob.find(config.spec_files).filter(function (filename) {
                        return reg.test(filename);
                    }));
                })();
            } else {
                continue;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    if (specFiles.length === 0) {
        console.log('No files needed to be tested');
    } else {
        (function () {
            specFiles = specFiles.map(function (filename) {
                return path.join(process.cwd(), filename);
            });
            var helperFiles = [];
            var helperFilesPatterns = config.helper_files.filter(function (pattern) {
                if (/^https?:\/\//.test(pattern)) {
                    helperFiles.push(pattern);
                    return false;
                } else {
                    return true;
                }
            });
            helperFiles = helperFiles.concat(glob.find(helperFilesPatterns).map(function (filename) {
                return path.join(process.cwd(), filename);
            }));
            var Test = require('./testers/' + config.engine).Test;
            var test = new Test(specFiles, helperFiles);
            test.on('failed', function (result) {
                console.log(chalk.red('Spec: ' + result.name));
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = result.errors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var error = _step2.value;

                        console.log('    ' + error.stack);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                            _iterator2['return']();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                console.log('\n');
            });
            test.on('finish', function (stats) {
                var msg = 'Executed ' + stats.total + ' specs, ' + stats.passed + ' ' + chalk.green('passed') + ', ' + stats.failed + ' ' + chalk.red('failed') + ', ' + stats.pending + ' pended.';
                if (stats.failed === 0) {
                    msg = chalk.white.bgGreen.bold(' OKAY ') + ' ' + msg;
                }
                console.log(msg);
            });
            test.run();
        })();
    }
};

exports.test = function () {
    child_process.exec('git diff --name-status HEAD', function (err, stdout) {
        if (err) {
            console.log(chalk.bold('Exception: ') + 'Not a git repo.');
        } else {
            if (stdout) {
                var files = [];
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = stdout.trim().split('\n')[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var fileStatus = _step3.value;

                        var result = rFileStatus.exec(fileStatus);
                        if (result) {
                            files.push(result[1]);
                        }
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                            _iterator3['return']();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                if (files.length) {
                    var gspConfig = fs.readJSONSync(path.join(process.cwd(), '.gspconfig'), { throws: false }) || {};
                    exports.testFiles(files, gspConfig.test);
                } else {
                    console.log('No files changed.');
                }
            } else {
                console.log('No files changed.');
            }
        }
    });
};
