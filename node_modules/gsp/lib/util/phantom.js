'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var child_process = require('child_process');
var gspdata = require('./gspdata');
var path = require('path');
var events = require('events');
var phantomjs = require('phantomjs');

var Browser = (function (_events$EventEmitter) {
    _inherits(Browser, _events$EventEmitter);

    function Browser() {
        _classCallCheck(this, Browser);

        _get(Object.getPrototypeOf(Browser.prototype), 'constructor', this).call(this);
        this.halted = false;
        this.logFile = 'phantomspawn.log';

        this.on('timeout', this.halt.bind(this));
        this.on('failure', this.halt.bind(this));
        this.on('error', this.halt.bind(this));
    }

    _createClass(Browser, [{
        key: 'halt',
        value: function halt() {
            this.halted = true;
        }
    }, {
        key: 'spawn',
        value: function spawn(pageUrl, options) {
            var _this = this;

            this.halted = false;
            var msgFile = gspdata.file(this.logFile, '');
            var msgLinesRead = 0;
            var timerId = undefined;
            var phantomProcess = undefined;

            var cleanup = function cleanup() {
                clearTimeout(timerId);
                gspdata.file(_this.logFile, null);
                if (phantomProcess.pid) {
                    phantomProcess.kill();
                }
            };

            (function loopy() {
                var logs = gspdata.file(this.logFile);
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = logs.split('\n').slice(msgLinesRead, -1)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var log = _step.value;

                        log = JSON.parse(log);
                        this.emit.apply(this, _toConsumableArray(log));
                        msgLinesRead += 1;
                        if (this.halted) {
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator['return']) {
                            _iterator['return']();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                if (this.halted) {
                    cleanup();
                } else {
                    timerId = setTimeout(loopy.bind(this), 100);
                }
            }).bind(this)();

            var args = [path.join(__dirname, 'phantom_script.js'), pageUrl, msgFile, JSON.stringify(options || {})];

            phantomProcess = child_process.execFile(phantomjs.path, args, function (err) {
                if (err) {
                    cleanup();
                }
            });
            phantomProcess.stdout.pipe(process.stdout);

            return phantomProcess;
        }
    }]);

    return Browser;
})(events.EventEmitter);

module.exports = new Browser();
