'use strict';

var minimatch = require('minimatch');
var glob = require('glob');

exports.match = function (filepath, patterns, options) {
    if (typeof patterns === 'string') {
        patterns = [patterns];
    }
    return patterns.some(function (pattern) {
        return minimatch(filepath, pattern, options);
    });
};

exports.find = function (patterns, options) {
    if (typeof patterns === 'string') {
        patterns = [patterns];
    }
    var files = glob.sync(patterns.shift(), options);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = patterns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var pattern = _step.value;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = glob.sync(pattern, options)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var file = _step2.value;

                    if (files.indexOf(file) === -1) {
                        files.push(file);
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return files;
};

exports.minimatch = minimatch;
exports.glob = glob;
