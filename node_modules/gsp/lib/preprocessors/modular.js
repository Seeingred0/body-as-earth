'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var path = require('path');

var rrequire = /require\(\s*?(['"])(.+?)\1\s*?\)/g;
var rexportsmodule = /\b(exports|module)\b/g;
var rdefine = /^(define\(\s*)((?:\[.+\]\s*,\s*)?function\b)/m;
var rdefineWithId = /^define\(\s*(['"]).+?\1\s*,\s*(?:\[.+\]\s*,\s*)?function\b/m;
var rclosurewrapper = /^\(\s*function\b/m;

var defaultConfig = {
    type: 'amd',
    idprefix: '',
    loadfunction: 'require',
    trimleading: 'src|dist'
};

var wrapModular = function wrapModular(filePath, fileContent, repoConfig) {
    var moduleConfig = Object.assign(defaultConfig, repoConfig.modular);
    if (rclosurewrapper.test(fileContent) || rdefineWithId.test(fileContent) || new RegExp('^' + moduleConfig.loadfunction + '\\(', 'm').test(fileContent)) {
        return fileContent;
    }
    var moduleId = filePath.slice(0, -path.extname(filePath).length).replace(new RegExp('^(?:' + moduleConfig.trimleading + ')/'), '');
    if (moduleConfig.idprefix) {
        moduleId = moduleConfig.idprefix + '/' + moduleId;
    }
    var parseDependencies = true;
    fileContent = fileContent.replace(rdefine, function (str, p1, p2) {
        parseDependencies = false;
        return p1 + moduleId + ', ' + p2;
    });
    if (parseDependencies) {
        var moduleIds = [],
            moduleExports = [];
        var _require = undefined;
        while (_require = rrequire.exec(fileContent)) {
            //eslint-disable-line
            moduleIds.push(_require[2]);
        }
        if (moduleIds.length > 0) {
            if (moduleConfig.type === 'amd') {
                moduleIds.push('require');
            }
            moduleExports.push('require');
        }
        var exportsmodule = fileContent.match(rexportsmodule);
        if (exportsmodule) {
            exportsmodule = Array.from(new Set(exportsmodule)).sort();
            if (moduleConfig.type === 'amd') {
                moduleIds.push.apply(moduleIds, _toConsumableArray(exportsmodule));
            }
            moduleExports.push.apply(moduleExports, _toConsumableArray(exportsmodule));
        }
        if (moduleIds.length > 0) {
            fileContent = 'define(\'' + moduleId + '\', [\'' + moduleIds.join("','") + '\'], function(' + moduleExports.join(",") + ') {\n' + fileContent + '\n});';
        } else {
            fileContent = 'define(\'' + moduleId + '\', function() {\n' + fileContent + '\n});';
        }
    }
    return fileContent;
};

module.exports = function (file, callback) {
    var filedata = wrapModular(file.get('filename'), file.get('filedata'), file.get('config'));
    file.set('filedata', filedata);
    callback();
};
