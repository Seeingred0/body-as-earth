'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Lint = require('./lint').Lint;
var csslint = require('csslint').CSSLint;

var CSSLint = (function (_Lint) {
    _inherits(CSSLint, _Lint);

    function CSSLint(filename, config, ignore) {
        _classCallCheck(this, CSSLint);

        _get(Object.getPrototypeOf(CSSLint.prototype), 'constructor', this).call(this, filename, config, ignore);
    }

    _createClass(CSSLint, [{
        key: 'lint',
        value: function lint() {
            if (!this.beforeLint()) {
                return;
            }
            var messages = csslint.verify(this.filename, this.config).messages;
            var errorLen = 0;
            messages = messages.map(function (message) {
                var warn = message.type === "warning";
                if (!warn) {
                    errorLen += 1;
                }
                return {
                    line: message.line || 0,
                    col: message.col || 0,
                    message: message.message.replace(/\.$/, ''),
                    rule: {
                        id: message.rule.id
                    },
                    warn: warn
                };
            });
            this.reporter(messages);
            return errorLen;
        }
    }]);

    return CSSLint;
})(Lint);

exports.Lint = CSSLint;
