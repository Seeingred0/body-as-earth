'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var chalk = require('chalk');
var fs = require('fs-extra');
var glob = require('../util/glob');
var textable = require('text-table');

var Lint = (function () {
    function Lint(filename, config, ignore) {
        _classCallCheck(this, Lint);

        this.filename = filename;
        this.config = config;
        this.ignore = ignore;
    }

    _createClass(Lint, [{
        key: 'lint',
        value: function lint() {
            if (this.beforeLint()) {
                this.reporter([]);
                return 0;
            }
        }
    }, {
        key: 'beforeLint',
        value: function beforeLint() {
            if (this.ignore && glob.match(this.filename, this.ignore)) {
                return false;
            }
            this.filedata = fs.readFileSync(this.filename, { encoding: 'utf8' });
            if (typeof this.config === 'string') {
                this.config = fs.readJSONSync(this.config, { throws: false }) || {};
            }
            return true;
        }
    }, {
        key: 'reporter',
        value: function reporter(messages) {
            if (!messages.length) {
                return;
            }
            var output = messages.map(function (message) {
                var out = [];
                out.push(message.line);
                out.push(message.col);
                out.push(message.warn ? chalk.yellow('warning') : chalk.red('error'));
                out.push(message.message.slice(0, -1));
                out.push(chalk.grey(message.rule.id));
                return out;
            });
            output = textable(output, { align: ['r', 'l'] });
            output = output.split('\n').map(function (el) {
                return el.replace(/(\d+)\s+(\d+)/, function (m, p1, p2) {
                    return chalk.grey(p1 + ':' + p2);
                });
            }).join('\n');
            console.log('\n' + this.filename + '\n');
            console.log(output);
            console.log(chalk.red.bold('\nâœ– ' + messages.length + ' problems'));
        }
    }]);

    return Lint;
})();

exports.Lint = Lint;
